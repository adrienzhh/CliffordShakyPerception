<?xml version="1.0"?>
<robot name="test_bot_2" xmlns:xacro="http://ros.org/wiki/xacro">
    
  <xacro:property name="base_width" value="0.055" />
  <xacro:property name="base_height" value="0.01" />
  <xacro:property name="wheel_dia" value="0.025" />
  <xacro:property name="wheel_thick" value="0.02"/>
  <xacro:property name="slider_base_height" value="0.1"/>
  <xacro:property name="slider_base_width" value="0.02"/>
  <xacro:property name="slider_height" value="0.15"/>
  <xacro:property name="slider_width" value="0.01"/>
  <xacro:property name="camera_width" value="0.05"/>
  <xacro:property name="slide_ulim" value="1.5"/>
  <xacro:property name="slide_llim" value="-1.5"/>
  <xacro:property name="cam_llim" value="-0.6"/>
  <xacro:property name="cam_ulim" value="0.6"/>

  <material name="white">
      <color rgba="1 1 1 1"/>
  </material>

  <xacro:macro name="default_inertial" params="mass inertia">
    <inertial>
      <mass value="${mass}" />
      <inertia ixx="${inertia}" ixy="0.0" ixz="0.0" iyy="${inertia}" iyz="0.0" izz="${inertia}" />
    </inertial>
  </xacro:macro>

  <xacro:macro name="wheel" params="prefix reflect1 reflect2 reflect3">
      <link name="${prefix}_wheel">
          <visual>
              <geometry>
                  <cylinder length="${wheel_thick}" radius="${wheel_dia}"/>
              </geometry>
              <origin xyz="${reflect3*wheel_thick/2} 0 0" rpy="0 1.57075 0"/>
              <material name="white"/>
          </visual>
          <collision>
              <geometry>
                  <cylinder length="${wheel_thick}" radius="${wheel_dia}"/>
              </geometry>
              <origin xyz="${reflect3*wheel_thick/2} 0 0" rpy="0 1.57075 0"/>
          </collision>
          <inertial>
            <mass value="1" />
            <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy=".0001" iyz="0.0" izz=".00001" />
          </inertial>
      </link>
  
      <joint name="base_to_${prefix}_wheel" type="continuous">
          <parent link="base_frame"/>
          <child link="${prefix}_wheel"/>
          <origin xyz="${reflect1*base_width/2} ${reflect2*base_width/2} 0" rpy="0.0 0.0 1.57079632679"/>
      </joint>
  </xacro:macro>

  <link name="base_frame">
      <visual>
          <geometry>
              <box size="${base_width} ${base_width} ${base_height}"/>
          </geometry>
          <material name="white"/>
      </visual>
      <collision>
          <geometry>
              <box size="${base_width} ${base_width} ${base_height}"/>
          </geometry>
      </collision>
      <inertial>
        <mass value="100" />
        <inertia ixx="100000.0" ixy="0.0" ixz="0.0" iyy="100000.0" iyz="0.0" izz="10000.0" />
      </inertial>
  </link>

  <xacro:wheel prefix="0" reflect1="1" reflect2="1" reflect3="1"/>
  <xacro:wheel prefix="1" reflect1="-1" reflect2="1" reflect3="1"/>
  <xacro:wheel prefix="2" reflect1="1" reflect2="-1" reflect3="-1"/>
  <xacro:wheel prefix="3" reflect1="-1" reflect2="-1" reflect3="-1"/>

  <link name = "slider_base">
      <visual>
          <geometry>
              <box size="${slider_base_width} ${slider_base_width} ${slider_base_height}"/> 
          </geometry>
          <origin xyz="0.0 0.0 ${slider_base_height/2}"/>
          <material name="white"/>
      </visual>
      <collision>
          <geometry>
              <box size="${slider_base_width} ${slider_base_width} ${slider_base_height}"/> 
          </geometry>
          <origin xyz="0.0 0.0 ${slider_base_height/2}"/>
      </collision>
      <inertial>
        <mass value="10" />
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001" />
      </inertial>
  </link>

  <joint name="base_slider_base" type="fixed">
      <parent link="base_frame"/>
      <child link="slider_base"/>
      <origin xyz="0.0 0.0 ${base_height/2}"/>
  </joint>

  <link name = "slider">
      <visual>
          <geometry>
              <box size="${slider_height} ${slider_width} ${slider_width}"/> 
          </geometry>
          <origin xyz="0.0 0.0 0.0"/>
          <material name="white"/>
      </visual>
      <!-- <collision>
          <geometry>
              <box size="${slider_height} ${slider_width} ${slider_width}"/> 
          </geometry>
      </collision> -->
      <inertial>
        <mass value=".001" />
        <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001" />
      </inertial>
  </link>

  <joint name="slider_base" type="prismatic">
      <parent link="base_frame"/>
      <child link="slider"/>
      <axis xyz="1 0 0"/>
      <origin xyz="0.0 0.0 ${slider_base_height+base_height}" rpy="0.0 -1.57079632679 0.0"/>
      <limit effort="500" lower="${slide_llim}" upper="${slide_ulim}" velocity="150"/>
    </joint>

  <link name = "camera_mount">
      <visual>
          <geometry>
              <box size="${camera_width} ${camera_width} ${camera_width}"/>
          </geometry>
      </visual>
      <collision>
          <geometry>
              <box size="${camera_width} ${camera_width} ${camera_width}"/> 
          </geometry>
      </collision>
    <inertial>
        <mass value="0.00001" />
        <inertia ixx="0.0000000001" ixy="0.0" ixz="0.000000000001000" iyy="0.0000" iyz="0.0" izz="0.0000000001" />
    </inertial>
  </link>

  <joint name="camera_slider" type="revolute">
      <parent link="slider"/>
      <child link="camera_mount"/>
      <origin xyz="${slider_height/2} 0.0 0.0" rpy="0.0 ${pi/2} 0.0"/> <!-- pi/2 -->
      <limit effort="200" lower="${cam_llim}" upper="${cam_ulim}" velocity="200"/>
      <axis xyz="0 -1 0"/>
  </joint>
  
  <transmission name="slider_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="$slider_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
    <joint name="slider_base">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
  </transmission>

  <transmission name="head_rotation">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="$camera_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
    <joint name="camera_slider">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
  </transmission>

  <xacro:macro name="wheel_trans" params="prefix">
    <transmission name="${prefix}_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <actuator name="${prefix}_wheel_motor">
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
      <joint name="base_to_${prefix}_wheel">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
    </transmission>
    <gazebo reference="${prefix}_wheel">
      <mu1 value="300.0"/>
      <mu2 value="100.0"/>
      <kp value="1000000.0" />
      <kd value="1000.0" />
      <material>Gazebo/Grey</material>
    </gazebo>
  </xacro:macro>

  <xacro:wheel_trans prefix="0"/>
  <xacro:wheel_trans prefix="1"/>
  <xacro:wheel_trans prefix="2"/>
  <xacro:wheel_trans prefix="3"/>

  <gazebo reference="camera_slider">
    <stopKd value="1000000.0" />
    <stopKp value="1000000.0" />
  </gazebo>
  <!-- <Gazebo plugin for ROS Control> -->
  <gazebo>
      <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
          <robotNamespace>/</robotNamespace>
      </plugin>
  </gazebo>

  <link name = "camera_link_l">
    <!-- <visual>
        <geometry>
            <box size="0.01 0.01 0.01"/>
        </geometry>
        <material name="white"/>
    </visual>
    <collision>
        <geometry>
            <box size="0.001 0.001 0.001"/> 
        </geometry>
    </collision>
    <inertial>
      <mass value="0.0001" />
      <inertia ixx="0.0000001" ixy="0.0" ixz="0.0000001" iyy="0.0000" iyz="0.0" izz="0.0000001" />
    </inertial> -->
  </link>

  <!-- Gazebo Plug in for Stereo Camera -->
  <joint name="camera_l" type="fixed">
    <parent link="camera_mount"/>
    <child link="camera_link_l"/>
    <origin xyz="${camera_width/2} ${camera_width/4} 0.0 " rpy="0.0 0.0 0.0"/>
  </joint>

  <link name="left_camera_optical_frame"/>
  <link name="right_camera_optical_frame"/>

  <joint name="left_camera_optical_joint" type="fixed">
    <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/> 
    <parent link="camera_link_l"/>
    <child link="left_camera_optical_frame"/>
    <preserveFixedJoint>true</preserveFixedJoint>
  </joint>

  <joint name="right_camera_optical_joint" type="fixed">
    <origin xyz="${camera_width/2} 0 0" rpy="0 0 0"/>
    <parent link="left_camera_optical_frame"/>
    <child link="right_camera_optical_frame"/>
    <preserveFixedJoint>true</preserveFixedJoint>
  </joint>

    <gazebo reference="camera_link_l">
        <sensor type="multicamera" name="stereo_camera">
          <update_rate>20.0</update_rate>
          <camera name="left">
            <horizontal_fov>1.3962634</horizontal_fov>
            <image>
              <width>800</width>
              <height>800</height>
              <format>R8G8B8</format>
            </image>
            <clip>
              <near>0.02</near>
              <far>300</far>
            </clip>
            <noise>
              <type>gaussian</type>
              <mean>0.0</mean>
              <stddev>0.0</stddev>
            </noise>
          </camera>
          <camera name="right">
            <pose>0 ${-camera_width/2} 0 0 0 0</pose>
            <horizontal_fov>1.3962634</horizontal_fov>
            <image>
              <width>800</width>
              <height>800</height>
              <format>R8G8B8</format>
            </image>
            <clip>
              <near>0.02</near>
              <far>300</far>
            </clip>
            <noise>
              <type>gaussian</type>
              <mean>0.0</mean>
              <stddev>0.0</stddev>
            </noise>
          </camera>
          <plugin name="stereo_camera_controller" filename="libgazebo_ros_multicamera.so">
            <alwaysOn>true</alwaysOn>
            <updateRate>30.0</updateRate>
            <cameraName>test_bot_2/camera</cameraName>
            <imageTopicName>image_raw</imageTopicName>
            <cameraInfoTopicName>camera_info</cameraInfoTopicName>
            <frameName>left_camera_optical_frame</frameName>
            <!-- <rightFrameName>right_camera_optical_frame</rightFrameName> -->
            <hackBaseline>${camera_width/2}</hackBaseline>
            <distortionK1>0.0</distortionK1>
            <distortionK2>0.0</distortionK2>
            <distortionK3>0.0</distortionK3>
            <distortionT1>0.0</distortionT1>
            <distortionT2>0.0</distortionT2>
          </plugin>
        </sensor>
      </gazebo>

      <link name = "imu_link">
        <!-- <visual>
            <geometry>
                <box size="0.001 0.001 0.001"/>
            </geometry>
            <material name="white"/>
        </visual>
        <collision>
            <geometry>
                <box size="0.001 0.001 0.001"/> 
            </geometry>
        </collision>
        <inertial>
          <mass value="0.0001" />
          <inertia ixx="0.0000001" ixy="0.0" ixz="0.0000001" iyy="0.0000" iyz="0.0" izz="0.0000001" />
        </inertial> -->
      </link>

      <joint name="imu_mount" type="fixed">
        <parent link="camera_mount"/>
        <child link="imu_link"/>
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0"/>
      </joint>

      <gazebo>
        <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
          <alwaysOn>true</alwaysOn>
          <bodyName>imu_link</bodyName>
          <topicName>imu</topicName>
          <serviceName>imu_service</serviceName>
          <gaussianNoise>0.0</gaussianNoise>
          <updateRate>250.0</updateRate>
          <rateDrift>0. 0. 0.</rateDrift>
          <accelDrift>0. 0. 0.</accelDrift>
        </plugin>
      </gazebo>


      <!-- <gazebo reference="imu_link">
        <gravity>true</gravity>
        <sensor name="imu_sensor" type="imu">
          <always_on>true</always_on>
          <update_rate>100</update_rate>
          <visualize>true</visualize>
          <topic>__default_topic__</topic>
          <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
            <topicName>imu</topicName>
            <bodyName>imu_link</bodyName>
            <updateRateHZ>100.0</updateRateHZ>
            <gaussianNoise>0.0</gaussianNoise>
            <xyzOffset>0 0 0</xyzOffset>
            <rpyOffset>0 0 0</rpyOffset>
            <frameName>imu_link</frameName>
            <initialOrientationAsReference>true</initialOrientationAsReference>
          </plugin>
          <pose>0 0 0 0 0 0</pose>
        </sensor>
      </gazebo> -->

      <gazebo>
        <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>50.0</updateRate>
          <bodyName>base_frame</bodyName>
          <topicName>ground_truth/state</topicName>
          <gaussianNoise>0.01</gaussianNoise>
          <frameName>world</frameName>
          <xyzOffsets>0 0 0</xyzOffsets>
          <rpyOffsets>0 0 0</rpyOffsets>
        </plugin>
      </gazebo>

</robot>
